{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Reese Schultz",
  "home_page_url": "http://localhost/blog",
  "feed_url": "http://localhost/blog/feed.json",
  "description": "Reese's website about programming.",
  "author": {
    "name": "Reese Schultz",
    "url": "https://reese.codes"
  },
  "language": "en",
  "favicon": "http://localhost/favicon.ico",
  "items": [
    {
      "id": "http://localhost/blog/post/unity-gamepad-play-mode/",
      "url": "http://localhost/blog/post/unity-gamepad-play-mode/",
      "title": "Activating the Unity Editor's Play Button via Gamepad",
      "summary": "How to use the start button on your controller to play games in the Unity editor.",
      "content_html": "<p>If you're like me, you are pathologically eager to test changes to the games you\nwork on. You might be so excited to validate correctness and usability that you\nnaturally grab your controller, forgetting to first initiate play mode. Then, a\nhail of self-resentment buffets your very soul. You gaze upon the Unity editor,\ntaking a moment to process what you have done. You are holding the controller in\nboth hands, and yet play mode is inactive. Now you must put the controller back\ndown.</p>\n<p>But no more.</p>\n<h3>A Solution</h3>\n<p>It is high time to put an end to the tyranny of keyboard- and mouse-based\ninitialization of play mode. With a simple editor script, we shall reclaim our\ndignity by starting play mode with the start button on any standard gamepad,\nincluding DualSense and Joy-Con controllers.</p>\n<p>Here's the script:</p>\n<pre><code class=\"language-csharp\">#if UNITY_EDITOR\n\nusing UnityEditor;\nusing UnityEngine.InputSystem;\n\n[InitializeOnLoad]\npublic class PlayWithGamepad\n{\n    static PlayWithGamepad()\n        =&gt; EditorApplication.update += Update;\n\n    static void Update()\n    {\n        var gamepad = Gamepad.current;\n\n        if (gamepad == null) return;\n\n        if (!EditorApplication.isPlaying &amp;&amp; gamepad.startButton.isPressed)\n        {\n            EditorApplication.EnterPlaymode();\n        }\n    }\n}\n\n#endif\n</code></pre>\n<p>You are free to use this script to make your life less bad. One caveat is that\nsaid script uses the\n<a href=\"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.0\" target=\"_blank\">new input system</a>,\nwhich, honestly, you should be using if you're making games with Unity. The new\ninput system takes getting used to, but, among other things, it normalizes input\nacross the spectrum of input devices. It handles deadzones. Perhaps more\nimportantly, it conventionalizes input mapping, allowing for programmatic\ncontrol of bindings from an in-game menu.</p>\n<h3>How the Code Works</h3>\n<p>Unsolicited advice aside, if you're wondering how the script works, it leverages\ndirectives to prevent itself from ending up in builds. A single instance of the\nscript is loaded during the runtime of the editor with the <code>InitializeOnLoad</code>\nattribute. The reason the <code>PlayWithGamepad</code> class itself is <em>not</em> static is so\nthat it can have a constructor. We use a parameterless constructor to hook into\nthe editor's update loop by way of a delegate.</p>\n<p>Thus, <code>Update</code> becomes a callback beholden to the editor's update loop.</p>\n<p>For each time the editor updates, our <code>Update</code> method checks for the current\ngamepad. No, it's not inefficient to do it that way. Plus, you do <strong>not</strong> want\nto do that in the constructor, because what happens if you unplug one controller\nand plug in another while the Unity editor is open? You need to know the\n<em>current</em> available gamepad not just for this script, but as a general rule for\nyour games.</p>\n<p>Of course, we pass control to the caller early if there is no gamepad. Then, if\nplay mode isn't already active and the start button is pressed, we enter play\nmode.</p>\n<h3>Conclusion</h3>\n<p>Now when you grab your gamepad before entering play mode, no worries. With this\nscript, you can just press the start button. With the explanation provided, you\nshould know enough to modify this script to suit your specific needs. For\nexample, if you do not yet have a pause menu to exit a game, you could,\ntemporarily, modify the script to turn off play mode. I'll leave that to you.</p>\n<p>Hope this helps.</p>",
      "date_published": "2022-08-08T19:00:00-05:00",
      "date_modified": "2022-08-08T19:00:00-05:00",
      "language": "en",
      "tags": [
        "unity",
        "csharp"
      ]
    },
    {
      "id": "http://localhost/blog/post/mocking-the-unmockable-in-typescript-and-javascript/",
      "url": "http://localhost/blog/post/mocking-the-unmockable-in-typescript-and-javascript/",
      "title": "Mocking the Unmockable in TypeScript and JavaScript",
      "summary": "Yes, you can mock ES6 function exports! Here's how.",
      "content_html": "<h3>Scenario</h3>\n<p>Consider the following scenario. You're using a package or module that directly\nexports functions, so you're unable to mock them. Let's presume this is the\nsource code of one such function:</p>\n<pre><code class=\"language-typescript\">export function theirFunction(): string {\n  return &quot;&quot;;\n}\n</code></pre>\n<blockquote>\n<p>We're using TypeScript in this example, but, if you remove the types, then you\nhave ES6-compliant JavaScript.</p>\n</blockquote>\n<p>Let's say your code uses <code>theirFunction</code> like so:</p>\n<pre><code class=\"language-typescript\">function yourFunction(): boolean {\n  return &quot;&quot; === theirFunction();\n}\n</code></pre>\n<p>We'll assume you must always depend on <code>theirFunction</code> returning an empty\nstring, and maybe you want a test to fail if the output changes per an upgrade.\nYou <em>could</em> directly test <code>theirFunction</code>, although you only care about its\noutput changing in the context of <code>yourFunction</code>, not any others.</p>\n<p>This may be an arbitrary example, but it has practical implications; after all,\nhow do we mock <code>theirFunction</code>? It's immutable, so reassignment goes out the\nwindow, meaning that a conventional mocking library won't work here, at least\nnot directly.</p>\n<h3>Solution</h3>\n<p>To solve this problem, I suggest making a loosely-coupled, mockable extension of\nthe library encapsulating <code>theirFunction</code>. Consider creating a file like this:</p>\n<pre><code class=\"language-typescript\">import { theirFunction as theirUnmockableFunction } from &quot;./..&quot;;\n\nexport default new (class {\n  // ...\n\n  theirFunction(): string {\n    return theirUnmockableFunction();\n  }\n\n  // ...\n})();\n</code></pre>\n<p>The exported anonymous class is effectively a singleton that we must now use as\na stand-in for their library, as is the case in <code>yourFunction</code>:</p>\n<pre><code class=\"language-typescript\">import theirMockableLibrary from &quot;./../theirMockableLibrary.ts&quot;;\n\nfunction yourFunction(): boolean {\n  return &quot;&quot; === theirMockableLibrary.theirFunction();\n}\n</code></pre>\n<p>Congratulations, now your stubs and spies should work!</p>\n<p>For example, with Deno, we could stub <code>theirFunction</code> in this way:</p>\n<pre><code class=\"language-typescript\">import yourLibrary from &quot;./../yourLibrary.ts&quot;;\nimport theirMockableLibrary from &quot;./../theirMockableLibrary.ts&quot;;\n\nimport { returnsNext, stub } from &quot;https://deno.land/std/testing/mock.ts&quot;;\n\nimport { assertEquals } from &quot;https://deno.land/std/testing/asserts.ts&quot;;\n\n// ...\n\nconst theirFunctionStub = stub(\n  theirMockableLibrary,\n  &quot;theirFunction&quot;,\n  returnsNext([&quot;not an empty string!&quot;]),\n);\n\n// This should fail (because the mocking works!):\nassertEquals(yourLibrary.yourFunction(), true);\n\ntheirFunctionStub.restore();\n\n// ...\n</code></pre>\n<h3>Conclusion</h3>\n<p>It's clear that there are two major downsides to this approach:</p>\n<ol>\n<li>All of the parameters of your mockable functions should be the same as those\nof the unmockable ones; you must also passthrough arguments appropriately.</li>\n<li>You must directly reference, via dot notation, the exported object of any\nmocked functions being called, whether in a test file or not. Fortunately,\nthe flipside is that you may refer to the object by whatever name you\nlike—probably not something unwieldly like <code>theirMockableLibary</code>.</li>\n</ol>\n<p>Hopefully this steers you away from hacking your package cache or something. And\nconsider submitting a pull request to improve the mockability of whichever\nlibrary you're using. The maintainers may be willing to hear you out. Have fun!</p>",
      "date_published": "2022-06-27T19:00:00-05:00",
      "date_modified": "2022-06-27T19:00:00-05:00",
      "language": "en",
      "tags": [
        "typescript"
      ]
    },
    {
      "id": "http://localhost/blog/post/specifize-first-maybe-generalize-later/",
      "url": "http://localhost/blog/post/specifize-first-maybe-generalize-later/",
      "title": "Specifize First, Maybe Generalize Later",
      "summary": "Why you should focus on solving specific problems with code, rather than inventing work for yourself.",
      "content_html": "<h3>Introduction</h3>\n<p>Language features such as generics and reflection give programmers false\nconfidence that any given problem ought to have a generalized solution. For\nexample, take a feature as transcendental as the function; yes, it <em>can</em> support\na parametric hodgepodge soup, but does that mean it necessarily <em>should</em>? No,\nnot unless a situation calls for it. When generalizing solutions, programmers\ntend not to avoid these common pitfalls:</p>\n<ul>\n<li>Solving problems that do not (and may never) exist</li>\n<li>Playing whack-a-mole while making one case work, breaking others</li>\n<li>Tanking readability and maintainability of the codebase</li>\n</ul>\n<p>I have personally witnessed programmers of all experience levels catch\ngeneralization fever, myself included. The time and cost involved in\n<a href=\"https://wiki.c2.com/?PrematureGeneralization\" target=\"_blank\">premature generalization</a> is\nalmost never scrutinized, because otherwise concerned stakeholders (assuming\nthere are any) are blissfully unaware of it. Thus, it's up to us, programmers,\nto identify and confront potential wasted effort. While we should expect\ngeneralization in libraries and middleware, products and services building upon\nthose things should be solving specific problems.</p>\n<h3>Example</h3>\n<p>Let's say you are coding a game. The gameplay is dependent on simulated fluid\ndynamics, but unfortunately there is no code to be licensed that adequately\nfulfills the game's requirements, so you would have to code it yourself. This,\nby the way, is an exceedingly common predicament, because it turns out that the\nmost generalized tools are not general enough. It is also a satisfying reason\nfor pivoting.</p>\n<p>Assuming you must build this game based on fluid dynamics, you do at least have\nenough experience to understand that there should be a fluid dynamics module\nloosely coupled from the core game logic. In spite of that, your mind starts\nracing...</p>\n<blockquote>\n<p><em>What if I need the fluid dynamics for a future game?</em></p>\n</blockquote>\n<p>Doubtful, and even if you did, you'll probably rewrite almost everything.</p>\n<blockquote>\n<p><em>What if I sold this code as an asset?</em></p>\n</blockquote>\n<p>Wait, weren't you building a game?</p>\n<blockquote>\n<p><em>What if I made this module open-source?</em></p>\n</blockquote>\n<p>That's as time-consuming as producing an asset.</p>\n<h3>Conclusion</h3>\n<p>For the vast majority of products and services, generalization increases scope,\nwhen we should be searching for any possible reason to decrease it. We do not\nnecessarily need to cut features, but we should always consider simplifying\ntheir implementation. Even if you are a corporate programmer cozily alienated\nfrom tangible business impact, the more general your code, the more that can go\nwrong. That may translate to job security for some, but will taint perceptions\nof others.</p>\n<p>I recommend solving specific problems first and foremost. Never generalize\nwithout consideration of alternatives. Generalization that substantially\nincreases scope should require a sanity check by peers, and explicit consent\nfrom (non-technical) stakeholders.</p>",
      "date_published": "2022-01-08T18:00:00-06:00",
      "date_modified": "2022-07-20T19:00:00-05:00",
      "language": "en",
      "tags": [
        "rambling"
      ]
    },
    {
      "id": "http://localhost/blog/post/spawning-prefabs-with-unity-dots/",
      "url": "http://localhost/blog/post/spawning-prefabs-with-unity-dots/",
      "title": "Spawning Prefabs With Unity DOTS",
      "summary": "How to manage and instantiate entity prefabs.",
      "content_html": "<h3>Introduction</h3>\n<p>With Unity's implementation of the entity-component-system (ECS) pattern, there\nare two modes from which spawning can be initiated:</p>\n<ol>\n<li><strong>Authoring</strong>, which is when we're manually designing stuff. That's when\nwe're in the editor, adding GameObjects and adjusting parameters. Yes, with\nUnity ECS, we still use GameObjects for setting up levels and prefabs. We try\nto convert most of those GameObjects into entities upon startup with special\nscripts. Sometimes it's not feasible, in which we take a hybrid approach\n(orchestrating DOTS and non-DOTS code).</li>\n<li><strong>Runtime</strong>, which is referring to the period <em>after</em> authoring, and before\nexecution halts. In other words, this is what happens while people are\nplaying your game. It's the process, minus authoring conversion at the\nbeginning.</li>\n</ol>\n<p>Since Unity DOTS is all about conquering CPU-bound tasks, you may be interested\nin it for creating a runtime-heavy game. It's great for city builders,\nsandboxes, real-time strategy games, etc. With that in mind, if you're anything\nlike me, you're mainly interested in spawning at runtime, specifically using\nprefabs. I created a package for this, and I'll show you how to use it.</p>\n<h3>Prerequisites</h3>\n<p>Before you proceed, make sure you've installed the <em>Entities</em> and <em>Hybrid\nRenderer</em> packages in your project, at the bare minimum. This tutorial has been\nupdated for Entities and Hybrid Renderer <code>0.51.0-preview.32</code>. It <em>may</em> be\nfurther updated to account for future developments.</p>\n<p>You also need to install the\n<a href=\"https://github.com/reeseschultz/ReeseUnityDemos/tree/master/Packages/com.reese.epg#reeses-entity-prefab-groups\" target=\"_blank\"><em>Entity Prefab Groups</em></a>\npackage by following the provided instructions, which is part of my\n<a href=\"https://github.com/reeseschultz/ReeseUnityDemos\" target=\"_blank\">Unity monorepo</a>.</p>\n<h3>Authoring</h3>\n<p>After you've installed Entity Prefab Groups, you're ready to create a component\n(in terms of ECS). Here's how:</p>\n<ol>\n<li>Create a script called <code>SomeComponent.cs</code>.</li>\n<li>Copy-paste this code into the script (namespacing optional):</li>\n</ol>\n<pre><code class=\"language-csharp\">using System;\nusing Unity.Entities;\n\n[Serializable]\n[GenerateAuthoringComponent]\npublic struct SomeComponent : IComponentData { }\n</code></pre>\n<p>The component ought to be serializable for saving and loading, as indicated by\nthe <code>Serializable</code> attribute. Additionally, the <code>GenerateAuthoringComponent</code>\nattribute instructs Unity to generate a special <code>MonoBehaviour</code> for you, one\nthat adds <code>SomeComponent</code> to the entity during the conversion process.</p>\n<p>Also, it's worth noting that this component is a special one: it's a component\n<em>tag</em>, because there's no data in it. There could be, however, if you want.\nThat's up to you. You could add any\n<a href=\"https://en.wikipedia.org/wiki/Blittable_types\" target=\"_blank\">blittable</a> data to the\ncomponent, such as an <code>Entity</code>, a <code>float3</code>, or whatever. Generated authoring\ncomponents allow you to change these properties during authoring. Entities end\nup being represented as GameObjects during authoring, so you can reference them\nas long as they're being converted into entities too, even children of a prefab!</p>\n<p>Anyway, after you save the script and switch back to the Unity editor, you'll\nhave an authoring component to work with.</p>\n<p><img src=\"http://localhost/blog/media/some-component.gif\" alt=\"adding the component\"></p>\n<p>Go ahead and add that component to the prefab. Note how it's named <em>Some\nComponent Authoring</em>, indicating exactly what it's intended for.</p>\n<p>Next, open up a scene and create a new GameObject called <em>Prefabs</em>.</p>\n<p><img src=\"http://localhost/blog/media/create-prefabs-go.gif\" alt=\"creating a prefabs gameobject\"></p>\n<p>Now you're ready turn that GameObject into an <code>EntityPrefabGroup</code>! Add it just\nlike you would any other <code>MonoBehaviour</code>. Then add the prefab you made to its\nlist.</p>\n<p><img src=\"http://localhost/blog/media/entity-prefab-group.gif\" alt=\"adding the entity prefab group component\"></p>\n<p>The <code>EntityPrefabGroup</code> adds the needed <code>ConvertToEntity</code> component\nautomatically, which is used to convert a GameObject into an entity. Unless\nspecified otherwise with a custom authoring script, this conversion will even\ninclude the transform, mesh, render bounds, etc. For your regular workflow, I\nrecommend maximally exploiting the <code>GenerateAuthoringComponent</code> attribute to\nfocus on the data relevant to your work.</p>\n<h3>Runtime</h3>\n<h4>Single-threaded Context</h4>\n<p>It's time to spawn some entities:</p>\n<pre><code class=\"language-csharp\">using Reese.EntityPrefabGroups;\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\n\npublic partial class SomeSystem : SystemBase\n{\n    protected override void OnUpdate()\n    {\n        var somePrefab = EntityManager.GetPrefab&lt;SomeComponent&gt;();\n        var someInstance = EntityManager.Instantiate(somePrefab);\n        var random = new Unity.Mathematics.Random((uint)new System.Random().Next());\n\n        EntityManager.AddComponentData(someInstance, new Translation\n        {\n            Value = random.NextFloat3(-100, 100)\n        });\n\n        EntityManager.AddComponentData(someInstance, new Rotation\n        {\n            Value = quaternion.Euler(random.NextFloat3())\n        });\n\n        EntityManager.AddComponentData(someInstance, new Scale\n        {\n            Value = random.NextFloat() * 5\n        });\n    } \n}\n</code></pre>\n<p>In the above example, we get the entity prefab associated with <code>SomeComponent</code>.\nSince <code>GetPrefab</code> runs a query behind the scenes, it can only be safely run from\n<code>OnUpdate</code>, as to opposed to say, <code>OnCreate</code> and <code>OnStartRunning</code>. That said,\nqueries are extremely efficient, so creating and executing them each frame is\nperfectly fine. This does not have the same performance impact as finding\nGameObjects, or getting their attached scripts, per frame.</p>\n<p>Furthermore, be aware that the component, <code>SomeComponent</code> in this case, should\nbe a <em>singleton</em>. This means it should uniquely identify the prefab—other\nprefabs should <em>not</em> have that component! Now, just to be clear, singletons and\ntags are two different concepts. A singleton could be a component tag, or it\ncould have various fields.</p>\n<p><code>somePrefab</code> is instantiated by creating a new <code>someInstance</code> each frame. We\nrandomize the <code>Translation</code>, <code>Rotation</code>, and <code>Scale</code> component values. Note how\nI use <code>AddComponentData</code> instead of <code>SetComponentData</code>. This is because setting\nassumes that a component already exists, even when it doesn't, which could cause\na runtime error. Adding involves a check that actually either adds or sets a\ncomponent, with no noticeable impact on performance. The main downside to adding\ninstead of setting is the potential to impose <em>structural changes</em>, which we'll\ndiscuss shortly.</p>\n<p>Anyhow, the result of our code ought to look something like this:</p>\n<p><img src=\"http://localhost/blog/media/spawning-skulls.gif\" alt=\"spawning skulls\"></p>\n<p>Well, maybe you're not using skulls, but I am.</p>\n<p>And so far, we're not even taking advantage of the fact that our prefabs are\ngrouped. What if we wanted to spawn random animals, or variants of anything? To\ndo that, you would add your prefab variants to an <code>EntityPrefabGroup</code> list. That\ngroup GameObject would require its own singleton component, which you've already\nlearned how to create in this tutorial.</p>\n<p>With all that in mind, we could spawn variants from said group like so:</p>\n<pre><code class=\"language-csharp\">using Reese.EntityPrefabGroups;\nusing Unity.Entities;\nusing Unity.Transforms;\n\npublic partial class SomeSystem : SystemBase\n{\n    protected override void OnUpdate()\n    {\n        var animalPrefabs = EntityManager.GetPrefabs&lt;Animal&gt;().Reinterpret&lt;Entity&gt;();\n        var randomIndex = UnityEngine.Random.Range(0, animalPrefabs.Length);\n        var someInstance = EntityManager.Instantiate(animalPrefabs[randomIndex]);\n        var random = new Unity.Mathematics.Random((uint)new System.Random().Next());\n\n        EntityManager.AddComponentData(someInstance, new Translation\n        {\n            Value = random.NextFloat3(-100, 100)\n        });\n    } \n}\n</code></pre>\n<p>There's a subtle difference here: this time we call <code>GetPrefabs</code> plural, rather\nthan the singular <code>GetPrefab</code>. It should be run from <code>OnUpdate</code> as well. This\nreturns a <code>DynamicBuffer&lt;PrefabGroup&gt;</code>. The <code>PrefabGroup</code> comes from the Entity\nPrefab Groups package, and its elements can be converted into entities with\nease. That's where <code>Reinterpret&lt;Entity&gt;</code> comes in. Ultimately, <code>animalPrefabs</code>\nevaluates as <code>DynamicBuffer&lt;Entity&gt;</code>. That buffer, I should mention, is just a\nway to hold a variable number of elements pertaining to a blittable type.</p>\n<p>There's not much else here. We instantiate a randomly selected prefab from said\nbuffer. Then we just set a random translation this time. In the process, we've\nused three different random number generators out of sheer disregard that the\nAPI of one may cover all our needs. Too bad we'll never know, because we don't\nread APIs, nor documentation.</p>\n<p>We're programmers, after all.</p>\n<p>If you've programmed (and authored!) correctly up until this point, then you\nshould see something like this:</p>\n<p><img src=\"http://localhost/blog/media/spawning-animals.gif\" alt=\"spawning animals\"></p>\n<p>In all seriousness, you ought to familiarize yourself with the <code>EntityManager</code>.\nWhy? Because there's a lot it can do that I can't cover in a tutorial. It can\nbulk-spawn entities using a <code>NativeArray&lt;Entity&gt;</code>, for example. Read more about\nthe <code>EntityManager</code>\n<a href=\"https://docs.unity3d.com/Packages/com.unity.entities@0.51/api/Unity.Entities.EntityManager.html\" target=\"_blank\">here</a>.</p>\n<h4>Parallel Context</h4>\n<p>Just to clarify, everything we have done has been on the main thread. All\ninstantiation occurs on the main thread, even if prompted from a parallel\ncontext. To understand why that is, you have to consider that entities and their\ncomponents compose a memory layout. A term for when this layout changes is the\n<em>structural change</em>, which occurs when entities, or their components, are added\nor removed.</p>\n<p>Structural changes result in synchronization points, wherein all jobs must\ncomplete for processing to continue. As the\n<a href=\"https://docs.unity3d.com/Packages/com.unity.entities@0.51/api/Unity.Entities.EntityManager.html\" target=\"_blank\">EntityManager documentation</a>\nputs it, this &quot;blocks the main thread and prevents the application from taking\nadvantage of all available cores as the running Jobs wind down.&quot; Thus, long\nstory short, you don't want parallel jobs winding up and down multiple times in\na single frame due to sync points, so we must orchestrate said jobs with care.\nWe want to try to keep it down to only one sync point, if possible, at the\nbeginning or end of a frame. The best way to attempt this is to use:</p>\n<ol>\n<li>A <strong>memory barrier</strong>, which, in the case of Unity ECS, is a reference to the\n<code>EntityCommandBufferSystem</code>. This system can queue up <em>commands</em> performed\nduring parallel-executing jobs. Commands performed with the memory barrier\nexecute deterministically, so they're played back in order. When are they\nplayed back? Either at the end or beginning of a frame, depending on which\nflavor you choose.</li>\n<li>And you need a <strong>command buffer</strong>, the actual buffer of commands that the\nmemory barrier enqueues.</li>\n</ol>\n<p>Putting what we know about the memory barrier and command buffer together, you\ncan copy-paste the following as a repeatable pattern for processing in a\nparallel context with entities:</p>\n<pre><code class=\"language-csharp\">namespace SomeNamespace\n{\n    public partial class SomeSystem : SystemBase\n    {\n        EntityCommandBufferSystem barrier =&gt; World.GetOrCreateSystem&lt;EndSimulationEntityCommandBufferSystem&gt;();\n\n        protected override void OnUpdate()\n        {\n            var commandBuffer = barrier.CreateCommandBuffer().AsParallelWriter();\n\n            Entities\n                .WithAll&lt;SomeComponent&gt;()\n                .ForEach((Entity entity, int entityInQueryIndex) =&gt;\n                {\n                    if (someConditionMet) commandBuffer.Instantiate(entityInQueryIndex, entity);\n                })\n                .WithName(&quot;SomeJob&quot;)\n                .ScheduleParallel();\n\n            barrier.AddJobHandleForProducer(Dependency);\n        }\n    }\n}\n</code></pre>\n<p>You'll notice that, after we create the memory buffer, we create a <em>parallel</em>\ncommand buffer from it via <code>AsParallelWriter</code>. According to the\n<a href=\"https://docs.unity3d.com/Packages/com.unity.entities@0.51/api/Unity.Entities.EntityManager.html\" target=\"_blank\">docs</a>,\nthe magic <code>entityInQueryIndex</code> should &quot;be used as the <code>jobIndex</code> for adding\ncommands to a concurrent <code>EntityCommandBuffer</code>,&quot; usually instead of the\n<code>nativeThreadIndex</code>.</p>\n<p>We also inform the memory barrier, via <code>AddJobHandleForProducer</code>, that this\nsystem is in fact <em>producing</em>, which effectively means using the command buffer\nin any way that modifies the memory layout. Every time a job is generated via\n<code>ForEach</code> in a <code>SystemBase</code>, the system's built-in <code>Dependency</code> is automatically\nupdated, which is simply a job handle. That's why we pass it via\n<code>AddJobHandleForProducer</code> following the job definition.</p>\n<p>Finally, please familiarize yourself with the <code>CommandBuffer</code>\n<a href=\"https://docs.unity3d.com/Packages/com.unity.entities@0.51/manual/entity_command_buffer.html\" target=\"_blank\">here</a>.\nDo not fear it. It performs almost all of the same exact operations as the\n<code>EntityManager</code>, with similar method names. Remember, all you're doing with it\nis queuing up commands to be executed either at the beginning or end of a frame\non the main thread.</p>\n<p>I hope this helps!</p>",
      "date_published": "2021-09-16T19:00:00-05:00",
      "date_modified": "2022-07-19T19:00:00-05:00",
      "language": "en",
      "tags": [
        "unity",
        "csharp"
      ]
    },
    {
      "id": "http://localhost/blog/post/how-extension-methods-work-in-csharp/",
      "url": "http://localhost/blog/post/how-extension-methods-work-in-csharp/",
      "title": "How Extension Methods Work in C#",
      "summary": "Learn how to \"add\" methods to an existing type.",
      "content_html": "<h3>Introduction</h3>\n<p>Suppose you have a type called <code>Cat</code>. But! <code>Cat</code> has no <code>Meow</code> method due to\nshort-sighted vision on the part of its designers. How can you be expected to\ncomplete your work without a meowing cat?</p>\n<p>How? By creating an <em>extension method</em>, as in a method that extends a given\ntype. I'll show you what's involved.</p>\n<p>Know that there are different ways to organize your extension methods. For any\ngiven project, I tend to throw those methods in a namespaced, static class\ncalled <code>Util</code>, along with other static methods. As to why, it's because I don't\nfeel like creating a class to encapsulate a single method. Most of the time, you\nmay only require one or two extension methods per type. As the number of methods\nincreases, and the need arises for more fine-grained organization, it's\nproductive to refactor, grouping like methods by class. The popular convention,\nin this case, would be to create a class called <code>CatExtensions</code>.</p>\n<p>Let's go with that—create a file called <code>CatExtensions.cs</code>. That's where we'll\nwrite our code.</p>\n<h3>Walkthrough</h3>\n<p>First, we'll import the <code>System</code> dependency for the sake of this example, and\ndeclare a namespace:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace SomeNamespace\n{\n  // TODO\n}\n</code></pre>\n<p>Be sure to replace <code>SomeNamespace</code> with a different name.</p>\n<p>Second, we'll add this scaffolding inside the namespace:</p>\n<pre><code class=\"language-csharp\">public class Cat { }\n\npublic static class CatExtensions\n{\n  // TODO\n}\n</code></pre>\n<p>I'm including a minimal implementation of <code>Cat</code> just to prevent compiler errors,\nin case you want to run this code. While in this example <code>Cat</code> is a <code>class</code>, it\ncould also be a <code>struct</code>, or even an <code>interface</code>! Yep, extension methods are\napplicable for interfaces too.</p>\n<p>Anyway, bear in mind that extension methods must be <code>static</code>, hence why\n<code>CatExtensions</code> is <code>static</code>—there's no reason for it to ever be instantiated.</p>\n<p>Finally, add the extension method to the <code>CatExtensions</code> class:</p>\n<pre><code class=\"language-csharp\">public static void Meow(this Cat cat, int meowCount)\n{\n  Console.WriteLine($&quot;The cat meows {meowCount} times!&quot;);\n}\n</code></pre>\n<p>Note that extension methods must be <code>static</code>. To extend <code>Cat</code>, we supply the\n<code>this</code> keyword followed by the <code>Cat</code> type and <code>cat</code> variable name. If we wanted,\nwe could modify <code>cat</code> via its accessible members, if it had any. In this case,\nwe pass another parameter called <code>meowCount</code>, simulating the number of times the\ncat meows through console output. Here, we're using string interpolation since\nit flows better than concatenation.</p>\n<h3>Final Result</h3>\n<p>Putting everything together:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace SomeNamespace\n{\n  public class Cat { }\n\n  public static class CatExtensions\n  {\n    public static void Meow(this Cat cat, int meowCount)\n    {\n      Console.WriteLine($&quot;The cat meows {meowCount} times!&quot;);\n    }\n  }\n}\n</code></pre>\n<h3>Usage</h3>\n<p>Let's assume a cat has been instantiated like this:</p>\n<pre><code class=\"language-csharp\">var cat = new Cat();\n</code></pre>\n<p>Now, there are two ways you can call <code>Meow</code> on <code>cat</code>. The first, and preferred\nway, is to do this:</p>\n<pre><code class=\"language-csharp\">cat.Meow(3);\n</code></pre>\n<p>The output of that would be:</p>\n<pre><code class=\"language-plaintext\">The cat meows 3 times!\n</code></pre>\n<p>The second way is much more verbose:</p>\n<pre><code class=\"language-csharp\">CatExtensions.Meow(cat, 5);\n</code></pre>\n<p>The output of this would be:</p>\n<pre><code class=\"language-plaintext\">The cat meows 5 times!\n</code></pre>\n<p>Calling <code>Meow</code> like a typical static method, which it technically is, kind of\ndefeats the point of it also being an extension method. Extension methods are,\nafter all, an avenue for writing more terse, readable code. In other words, they\npermit an arguably more elegant style as opposed to the alternative.</p>\n<p>I hope this helped demystify extension methods for you.</p>",
      "date_published": "2021-08-30T19:00:00-05:00",
      "date_modified": "2021-08-30T19:00:00-05:00",
      "language": "en",
      "tags": [
        "csharp"
      ]
    },
    {
      "id": "http://localhost/blog/post/fps-refresh-rates-and-you/",
      "url": "http://localhost/blog/post/fps-refresh-rates-and-you/",
      "title": "FPS, Refresh Rates, and You",
      "summary": "Battle of the Syncs: VSync, FreeSync, G-Sync, Enhanced Sync, Fast Sync—a saga of coil whine, loud fans, screen tearing, input lag, and humanity's rebellion against these dastardly fiends.",
      "content_html": "<p>Recently, I upgraded my PC's hardware, and installed a clean-slate OS. Out of\ncuriosity, I ran a prototype of a game I'm working on. I noticed that the frame\nrate quadrupled in lieu of the upgrade⁠—<em>nice</em>.</p>\n<p>But, what was that horrendous sound?</p>\n<h3>Coil Whine &amp; Loud Fans</h3>\n<p>Oh, that was just the sound of my GPU screaming. Yes, the higher-frequency\nprocessing instigated <em>coil whine</em>. What is coil whine? Michael Crider\nsuccinctly explains it\n<a href=\"https://www.howtogeek.com/297166/what-is-coil-whine-and-can-i-get-rid-of-it-on-my-pc/\" target=\"_blank\">via <em>How-To Geek</em></a>:</p>\n<blockquote>\n<p>On a pure technical level, coil whine refers to an undesirable noise emitted\nby an electronic component vibrating as power runs through an electrical\ncable. Just about anything with a power source can create coil whine to some\ndegree, but it’s usually caused by an electrical current going through a\npower-regulating component like a transformer or inductor, causing its\nelectrical wiring to vibrate at a variable frequency.</p>\n</blockquote>\n<p>Coil whine is, in fact, normal; it's just that we don't normally hear it.</p>\n<p>Relatedly, Crider goes on to say:</p>\n<blockquote>\n<p>But when you’re dealing with high-powered components in modern gaming PCs,\nespecially the graphics card and power supply, these vibrations can be\naudible. This is especially true for anyone who’s sensitive to high-frequency\nnoises. <strong>In bad cases, you can actually hear the pitch of the coil whine\nchange as the GPU draws more or less power, and the electrical frequency\nacross various components shifts</strong> [my emphasis].</p>\n</blockquote>\n<p>After perusing various forums, I came to realize that this is a common problem,\nand the culprit is in allowing the GPU to process frames as quickly as it\npleases. Some people have also reported their GPU fans spinning up at a\nperfectly annoying harmonic resonance that replaces the wonderment of life with\nfrenetic melancholy. These problems may be remedied at one of three levels:</p>\n<ol>\n<li>Hardware level</li>\n<li>Driver level</li>\n<li>Game level</li>\n</ol>\n<p>I'll touch upon hardware later. As for drivers, controlling FPS with them is\nexpected, and provides for a more consistent, holistic gaming experience than\nhaving users painstakingly update configuration on a per-game basis. Still, it\nwould <em>seem</em> ideal for games to individually offer configurable settings for\nlimiting the frame rate.</p>\n<p><img src=\"http://localhost/blog/media/baldurs-gate-3-frame-rate-cap.gif\" alt=\"manipulating the frame rate cap slider in baldur's gate 3\"></p>\n<p class=\"caption\">Manipulating the frame rate cap slider of Baldur's Gate 3.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Baldur's_Gate_III\" target=\"_blank\">Baldur's Gate 3</a> takes an\ninteresting approach to this problem, offering an integer slider. On a 60Hz\nmonitor, the slider ranges from 10 to 240 frames per second, inclusive. Ideally,\nthe upper limit should vary based on the detected refresh rate, for reasons that\nwill become clear in time. Where does 240 come from, anyway?</p>\n<p>It has to do with screen tearing.</p>\n<h3>Screen Tearing</h3>\n<p>Screen tearing occurs when the frame rate of a video feed, controlled by\nsoftware in this case, loses synchronization with the display device's <em>refresh\nrate</em>. If the FPS is a multiple of the refresh rate, then screen tearing is\nprevented. The automated and familiar way of achieving this is through vertical\nsynchronization, or VSync, but I'll discuss it later. For the time being, note\nthat 240 is a multiple of 60, which may explain Baldur's Gate 3's slider\n(assuming 240 is not hard-corded). Keep in mind, however, that each frame over\n60FPS is effectively dropped by a display device operating at a 60Hz refresh\nrate. Of course, updates in the game may occur regardless of what said device is\ncapable of.</p>\n<p><img src=\"http://localhost/blog/media/screen-tearing-simulation-by-vanessaezekowitz-cc-by-sa-3-0.jpg\" alt=\"manipulating the frame rate cap slider in baldur's gate 3\"></p>\n<p class=\"caption\">\"A typical video tearing artifact (simulated image)\" by Vanessaezekowitz via <a href=\"https://commons.wikimedia.org/wiki/File:Tearing_(simulated).jpg\" target=\"_blank\">Wikipedia</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0\" target=\"_blank\">CC BY-SA 3.0</a>).</p>\n<p>What does it mean to <em>refresh</em>, anyway? Well, the images produced on your screen\nare the result of periodic electrical impulses along a grid of tiny lights.\nThink of each row in the grid as a <em>line</em>. Under normal circumstances, the\ncumulative light of these lines appears to have &quot;constant&quot; emission, but that is\nan illusory product of rapid impulses.</p>\n<p>Just how rapid are those impulses?</p>\n<p>Today, monitors commonly offer refresh rates of 30, 60, 75, 120, 144 and 240\nhertz (Hz). This unit is defined as one cycle per second. In the case of a\ncomputer monitor, this is one <em>refresh</em> per second. The ideal refresh rate with\nrespect to human vision, even in 2021, is still\n<a href=\"https://www.pcgamer.com/how-many-frames-per-second-can-the-human-eye-really-see/\" target=\"_blank\">up for debate</a>.\nWhat may complicate matters more is that many of us may have inadvertently\ntrained our vision processing systems, over the course of our modern lives, on\n<a href=\"https://youtu.be/3GJUM6pCpew\" target=\"_blank\">29.97FPS</a>. What implication this has on reaction\ntime, which is relevant to, say, a first-person shooter: I don't know.</p>\n<p>Regardless, we're limited by our hardware. Its limitations, however, seem to\nknow no limit. There is a small, albeit growing, proportion of gamers who own\n360Hz displays. What's more, there are\n<a href=\"https://www.tomshardware.com/news/lg-auo-developing-480hz-display-panels\" target=\"_blank\">480Hz ones on the way</a>.\nWhat conclusion is there to draw from our fetishism of refresh rates, at least\nfor the time being? Game developers ought to maintain flexibility with regard to\nthem; however, that is in spite of ongoing advances.</p>\n<h3>Vertical Synchronization</h3>\n<p>Before we get ahead of ourselves, let's discuss VSync. The vast majority of\ngraphically-intensive games use or offer it. What does it do? It attempts to\nmake FPS conform to detected refresh rates. How? Via framebuffers, which are\nmemory buffers containing all the pixels of a frame. All video cards, even\nancient ones, have a RAM-based framebuffer. Modern cards have enough framebuffer\nmemory to support <em>page flipping</em>.</p>\n<p>One type of page flipping is called <em>double buffering</em>. For it to work, the\nframebuffer must have enough memory to store at least two frames. Even if these\ntwo frames are stored in contiguous memory, we'll simply call them two separate\nbuffers since they are treated as such. One buffer is primary, the other\nsecondary. While the primary (front) buffer is read by the monitor, the\nsecondary (back) buffer is written to. After the <em>vertical blanking interval</em>,\nas in the time it takes for the aforementioned lines of lights to refresh, these\nbuffers are swapped⁠, or flipped—primary becomes secondary, and vice versa.</p>\n<p>When buffer swaps are synchronized with the refresh rate of a monitor, that is\nvertical synchronization (VSync) in a nutshell.</p>\n<p>Being restricted to a single buffer obviously has drawbacks insofar as\nflickering and screen tearing are concerned. While double buffering with VSync\nactivated may solve those problems, it also creates new ones because of the\ninherent delay in the vertical blanking interval. This causes:</p>\n<ol>\n<li><em>Input lag</em> resulting from the delay between in-game causes and their visual\neffects</li>\n<li>Artifacts from playback of low-FPS video known as <em>judder</em></li>\n<li>Possibly misleading results when benchmarking (generally not a huge deal)</li>\n</ol>\n<p><em>Triple buffering</em> is an alternative technique. Yep, my mom lets me buffer three\nframes instead of two. That involves, obviously, three buffers. Derek Wilson\noffers his take on triple buffering\n<a href=\"https://www.anandtech.com/show/2794/2\" target=\"_blank\">via AnandTech</a>:</p>\n<blockquote>\n<p>This additional buffer [over two] gives the computer enough space to keep a\nbuffer locked while it is being sent to the monitor (to avoid tearing) while\nalso not preventing the software from drawing as fast as it possibly can (even\nwith one locked buffer there are still two that the software can bounce back\nand forth between). The software draws back and forth between the two back\nbuffers and (at best) once every refresh the front buffer is swapped for the\nback buffer containing the most recently completed fully rendered frame.</p>\n</blockquote>\n<p>Delays, begone! Well, kind of. With triple buffering and VSync, the user can see\na fresher image on the screen than with double buffering and VSync. This\ntranslates to a more &quot;current&quot; visual representation of a game's state at any\ngiven moment. In <em>theory</em>, the player should be more able to appropriately react\nwith triple buffering as opposed to double buffering; however, this is often not\nthe case! Triple buffering with VSync reduces &quot;visualization lag,&quot; while\npotentially increasing(!) input lag over double buffering with VSync. Uh oh.\nWhat's the point in seeing a fresher state of a game if you can't act upon it?\nIt's like having no mouth, yet needing to scream (this constitutes another way\nto describe coil whine).</p>\n<p>All right, so triple buffering may increase input lag, and it requires more\nmemory. Hmm. The three buffers, treated as a sequential queue, are no doubt\nfancy, but not necessarily a great solution for competitive games such as CS:\nGO, assuming some players have world-class cognitive and physical reaction\ntimes. If there weren't people with such reaction times, I don't think they\nwould be getting paid millions of dollars to play video games—which they are.</p>\n<p>If you loathe the drawbacks of double and triple buffering with VSync, read on.\nThere's good news.</p>\n<h3>Variable Refresh Rate</h3>\n<p>We've been focused on making FPS conform to the refresh rate, but, what if I\ntold you that there was a way to, inversely, make the refresh rate conform to\nthe FPS? That's a <em>variable refresh rate</em>, or <em>adaptive synchronization</em>. There\nare two competing technologies for achieving this: AMD's\n<a href=\"https://en.wikipedia.org/wiki/FreeSync\" target=\"_blank\">FreeSync</a>, and Nvidia's\n<a href=\"https://en.wikipedia.org/wiki/Nvidia_G-Sync\" target=\"_blank\">G-Sync</a>. They do, essentially, the\nsame thing.</p>\n<p>It's worth mentioning there are two different kinds of G-Sync. There's the OG\n(original gangster) G-Sync, and G-Sync <em>Compatible</em>. Plain-old G-Sync requires a\nproprietary module to have been installed in a display device, along with a\ncompatible video card and driver software. G-Sync <em>Compatible</em>, then, is\nNvidia's way of supporting AMD's FreeSync, as FreeSync requires no added module\nin the display device. FreeSync is, after all, based upon the\n<a href=\"https://vesa.org/featured-articles/vesa-adds-adaptive-sync-to-popular-displayport-video-standard/\" target=\"_blank\">Adaptive-Sync protocol created by VESA</a>,\nas explained by Scharon Harding\n<a href=\"https://www.tomshardware.com/reviews/amd-freesync-monitor-glossary-definition-explained,6009.html\" target=\"_blank\">via Tom's Hardware</a>.</p>\n<p>Scharon further elucidates other differences, such as the fact that FreeSync\nsupports both HDMI and DisplayPort, whereas vanilla G-Sync only supports\nDisplayPort. She continues by saying:</p>\n<blockquote>\n<p>FreeSync is built on an open standard, and display makers don’t have to pay\nAMD a licensing fee or for hardware modules to incorporate it. Contrastingly,\nto use G-Sync, monitor makers have to pay for Nvidia's proprietary chip, which\nreplaces the scaler they'd typically buy. As a result, FreeSync monitors are\nusually cheaper than G-Sync ones. However, Nvidia is fighting back with G-Sync\nCompatible monitors, which it certified to run G-Sync despite lacking the\nhardware as a standard G-Sync display. Many G-Sync Compatible displays are\nalso FreeSync-certified, and we’ve found that numerous FreeSync monitors can\nalso run G-Sync Compatibility even though they’re not certified to do so.</p>\n</blockquote>\n<p>In essence, monitors are rated for their FreeSync-readiness based on their\ncapabilities, chiefly refresh rates, whereas a monitor is either strictly\nconformant to G-Sync, or not, depending on the presence of said chip.</p>\n<p>I will not delve into the minefield that is speculating about the performance\ndifferences between FreeSync and G-Sync, because, again, these technologies' end\ngoals are the same. Full disclosure: I've used both AMD and Nvidia products, and\nI have no allegiance to either one of them in particular. They're far more\nsimilar than they differ: these are entities prioritizing profit over all else.</p>\n<h3>Traditional VSync's Successor</h3>\n<p>You should know that AMD offers Enhanced Sync with certain cards, whereas Nvidia\noffers Fast Sync. These involve three buffers, as in triple buffering, except,\nrather than abstracting the buffers as a sequential queue, the oldest buffer is\noverwritten. This technique does not replace, but, instead, complements adaptive\nsynchronization. Enhanced/Fast Sync can also be used <em>without</em> adaptive\nsynchronization.</p>\n<p>They should both drastically reduce input lag over traditional VSync techniques,\n<a href=\"https://youtu.be/L07t_mY2LEU?t=454\" target=\"_blank\">as demonstrated in this video by Battle(Non)Sense</a>.</p>\n<h3>Conclusions for Gamers</h3>\n<p>FreeSync, G-Sync and G-Sync Compatible are your friends, assuming you have\naccess to hardware that supports them, or if you can afford conformant hardware.\nWith that, you can likely enjoy configuring most your software at the driver\nlevel, as opposed to a per-game basis. Lucky you.</p>\n<p>And whether or not you have a fancy monitor, if your GPU is modern and powerful,\nthen Enhanced/Fast Sync are worth using if available. More specifically, if your\nGPU can process frames faster than the refresh rate, these are worth toggling\non, but that depends on how demanding a given game is.</p>\n<p>Otherwise, you're left with traditional VSync if you want to prevent screen\ntearing. If you don't care, by all means, turn it off. Competitive gamers with\nolder hardware, unfortunately, cannot be too picky about screen tearing. Other\ngames, such as turn-based ones and city builders, may not require quick-fire\nreaction times, which opens the door to VSync even if it introduces some input\nlag.</p>\n<p>As for coil whine and annoying fan speeds, ultimately you want a hard limit on\nFPS no matter your hardware. Modern driver software has such limits, or target\nFPS. I recommend looking into this if you're experiencing noise issues. Good\nluck!</p>\n<h3>Conclusions for Game Developers</h3>\n<p>I'm probably preaching to the choir, but, if you're a game dev, you cannot\nassume that your players:</p>\n<ul>\n<li>Have hardware that supports adaptive synchronization</li>\n<li>Have access to Enhanced/Fast Sync</li>\n<li>Have some kind of system- or driver-enforced FPS cap or target</li>\n</ul>\n<p>Friendly reminder: you can't even assume that your players have any active\nperipherals at any given time. Oh, the joys of game development. Anyway, to\nprevent coil whine and fans from sounding as loud as wind turbines, you should\nprobably integrate an FPS slider as in Baldur's Gate 3 or\n<a href=\"https://en.wikipedia.org/wiki/Star_Wars_Jedi:_Fallen_Order\" target=\"_blank\">STAR WARS Jedi: Fallen Order</a>.</p>\n<p><img src=\"http://localhost/blog/media/star-wars-jedi-fallen-order-frame-rate-cap.gif\" alt=\"manipulating the frame rate cap slider in star wars jedi: fallen order\"></p>\n<p class=\"caption\">Manipulating the frame rate cap slider of STAR WARS Jedi: Fallen Order.</p>\n<p>The upper limit ought to be a multiple (like x4) of the detected refresh rate\n(and remember, you have to account for all connected monitors that can be used\nto display your game!). You'll notice that Respawn, while having made Fallen\nOrder into a great game, appear to have just hard-coded popular refresh rates\nfor it... Don't do that. By the way, the default value of the slider should be\nthe detected refresh rate. If you can't detect it, well, have fun figuring that\nout.</p>\n<p>In Unity, there is a\n<a href=\"https://docs.unity3d.com/ScriptReference/Application-targetFrameRate.html\" target=\"_blank\"><code>targetFrameRate</code></a>.\nAs discussed, setting it to the value from said slider can solve some problems.\nThere are likely equivalents in other engines. Notice, however, according to the\ndocumentation, that the <code>targetFrameRate</code> is invalidated by VSync when it is\nactive. As you know, you'll want to offer double and triple buffering with\nVSync, in addition to other video-related settings, just in case.</p>\n<p>Thanks for reading!</p>",
      "date_published": "2021-08-29T19:00:00-05:00",
      "date_modified": "2021-08-29T19:00:00-05:00",
      "language": "en",
      "tags": [
        "rambling"
      ]
    },
    {
      "id": "http://localhost/blog/post/the-real-ultimate-guide-to-fixing-omnisharp-in-vs-code/",
      "url": "http://localhost/blog/post/the-real-ultimate-guide-to-fixing-omnisharp-in-vs-code/",
      "title": "The Real Ultimate Guide to Fixing OmniSharp in VS Code",
      "summary": "If OmniSharp/IntelliSense isn't working for your C#/Unity projects, this may be the tutorial for you.",
      "content_html": "<p><strong>Update</strong>: Believe it or not, in the year since this post was originally\nwritten, it's become even more difficult to get OmniSharp working in VS Code.\nFortunately for you, I've updated the information here accordingly. Hopefully\nthis minimizes or fully eliminates troubleshooting on your part.</p>\n<hr>\n<p>Getting OmniSharp working on a fresh OS install can be frustrating. Worse,\nsometimes it just breaks. In this tutorial, I'll go over some common steps one\ncan take to fix it. I also address some specific things Linux and Unity game\nengine users can do to get that sweet code completion working.</p>\n<h3>Everyone Needs the .NET SDK and C# Extension</h3>\n<p>No matter what operating system you use, for OmniSharp/IntelliSense to work, you\nmust install the\n<a href=\"https://dotnet.microsoft.com/download/dotnet/sdk-for-vs-code\" target=\"_blank\">.NET SDK</a> if you\ndon't already have it.</p>\n<p>To check that the .NET SDK works, open a terminal (PowerShell in the case of\nWindows) and enter the following:</p>\n<pre><code class=\"language-bash\">dotnet --version\n</code></pre>\n<p>If that results in an error, you may need to restart the terminal or manually\nupdate your <code>PATH</code> variable.</p>\n<hr>\n<p>The other thing everyone needs is the\n<a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp\" target=\"_blank\">OmniSharp C# extension</a>.\nDon't forget to install this VS Code extension! It doesn't ship with VS Code by\ndefault.</p>\n<h3>Non-Windows Users Need Mono</h3>\n<p>If you're on Linux or macOS, you need to install\n<a href=\"https://www.mono-project.com/download/stable/\" target=\"_blank\">Mono</a>. After doing so, check\nthat it installed correctly with:</p>\n<pre><code class=\"language-bash\">mono --version\n</code></pre>\n<p>That should not result in an error, unless something still isn't quite right. If\nthat's the case, consider restarting the terminal or updating your <code>PATH</code>\nvariable.</p>\n<h4>Mono Path</h4>\n<p>Non-Windows users must also go to <em>File » Preferences » Settings</em> in VS Code.\nThen type &quot;mono path&quot; into the search bar. Be sure to set <em>OmniSharp: Mono Path</em>\nto the output of <code>which mono</code>, which should <em>not</em> be an empty string—otherwise,\nthere's a fun problem for you to investigate.</p>\n<h4>Additional Setup for Unity</h4>\n<p>For autocompletion in Unity projects, within VS Code you must ensure <em>OmniSharp:\nUse Modern Net</em> is disabled via <em>File » Preferences » Settings</em>. This is\nnecessary. Uncheck that box.</p>\n<p>On top of that, non-Windows users must\n<a href=\"https://launchpad.net/~eofla/+archive/ubuntu/msbuild\" target=\"_blank\">install MSBuild</a>, because\nit's\n<a href=\"https://github.com/OmniSharp/omnisharp-vscode/issues/5120\" target=\"_blank\">no longer included with OmniSharp</a>.\nHow convenient.</p>\n<h3>Unity Editor Configuration</h3>\n<h4>UPM</h4>\n<p>While in the Unity editor, go to <em>Window » Package Manager</em>. Ensure the <em>Visual\nStudio Code Editor</em> package is installed (it probably is).</p>\n<p>In the past, versions of this package have ironically broken code completion,\nand needed to be patched as a result. Generally speaking, you want to try to use\nthe latest version. If you try everything in this guide, and code completion is\nstill broken, then downgrading this package may be worth a try.</p>\n<h4>Project Preferences</h4>\n<p>Still in the Unity editor, go to <em>Edit » Preferences » External Tools</em>. Note\nthat these are preferences that aren't specific to any given Unity project. Then\nmake sure VS Code is set in the <em>External Script Editor</em>. If you have multiple\nbinaries of VS Code, select the one with the right permissions.</p>\n<p>Furthermore, check the following:</p>\n<ul>\n<li>Embedded packages</li>\n<li>Local packages</li>\n<li>Registry packages</li>\n<li>Git packages</li>\n<li>Built-in packages</li>\n<li>Local tarball</li>\n</ul>\n<p>For good measure, click on <em>Regenerate project files</em>, and save your project.</p>\n<p>It's recommended that, after adding new packages, you simply open your Unity\nproject by clicking on <em>Assets » Open C# Project</em>, which regenerates all checked\ntypes of project files <em>and</em> opens the project in VS Code.</p>\n<h3>Conclusion</h3>\n<p>If you're still having issues in spite of following this guide, I feel for you.\nTry restarting things, before trying anything else. Also, remember that you have\nto be patient with OmniSharp when it starts up. If it has a lot of project files\nto analyze, it could take minutes before IntelliSense starts working.</p>\n<p>There are times when OmniSharp does not start up at all, in which case you can\nrun a command to restart it. In VS Code, you can use the <code>Ctrl+Shift+P</code>\nkeybinding to enter commands. After using that keybinding, type in &quot;restart\nomnisharp&quot; and press enter.</p>\n<p>I hope this saves you some time.</p>",
      "date_published": "2021-08-27T19:00:00-05:00",
      "date_modified": "2022-08-05T19:00:00-05:00",
      "language": "en",
      "tags": [
        "csharp",
        "unity"
      ]
    },
    {
      "id": "http://localhost/blog/post/setting-shadows-recursively-in-unity-gameobjects/",
      "url": "http://localhost/blog/post/setting-shadows-recursively-in-unity-gameobjects/",
      "title": "Setting Shadows Recursively in Unity GameObjects",
      "summary": "Want to turn shadows on and off for a GameObject and all its children? I'll show you how.",
      "content_html": "<p>I wrote an extension method for recursively toggling shadows. You're free to use\nit! It's relatively straightforward:</p>\n<pre><code class=\"language-csharp\">public static void SetShadowsRecursively(this GameObject gameObject, ShadowCastingMode mode, bool includeInactive = false)\n{\n    if (gameObject == null) return;\n\n    var renderers = gameObject.GetComponentsInChildren&lt;Renderer&gt;(includeInactive);\n\n    if (renderers == null) return;\n\n    foreach (var renderer in renderers) renderer.shadowCastingMode = mode;\n}\n</code></pre>\n<h3>Usage</h3>\n<p>Copy and paste that code in some utility class. To use it, you can do something\nlike the following:</p>\n<pre><code class=\"language-csharp\">var parentGameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);\n\nvar childGameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);\nchildGameObject.transform.parent = parentGameObject.transform;\nchildGameObject.transform.localPosition = new Vector3(3, 0, 3);\n\nparentGameObject.SetShadowsRecursively(ShadowCastingMode.Off); // No more shadows!\n</code></pre>\n<h3>Explanation</h3>\n<p>Recall that <code>SetShadowsRecursively</code> is an <em>extension method</em>. This is a special\ntype of method that extends an existing class. If you find its first parameter\nconfusing, check out my\n<a href=\"http://localhost/blog/post/how-extension-methods-work-in-csharp\" target=\"_blank\">tutorial on extension methods</a>.</p>\n<p>The second parameter is of the type <code>ShadowCastingMode</code>, which comes from\n<code>UnityEngine.Rendering</code> (make sure you import it!). Remember that this is the\nparameter:</p>\n<pre><code class=\"language-csharp\">ShadowCastingMode mode\n</code></pre>\n<p>It's an <code>enum</code> that can be one of four possible values:</p>\n<ul>\n<li><code>Off</code> - Disables shadows.</li>\n<li><code>On</code> - Enables shadows projected outside the object's normals.</li>\n<li><code>TwoSided</code> - Enables shadows projected inside and outside the object's normals\n(you should normally prefer <code>On</code> instead).</li>\n<li><code>ShadowsOnly</code> - Makes the object invisible, but its shadows are visible.</li>\n</ul>\n<p>The third and final parameter, <code>includeInactive</code>, is <em>optional</em>. It's false by\ndefault, indicated by the equals sign followed by <code>false</code> like so:</p>\n<pre><code class=\"language-csharp\">bool includeInactive = false\n</code></pre>\n<p><code>includeInactive</code> means to include inactive GameObjects. For example, if you\nhave an object pool of inactive GameObjects whose shadow modes you want to\nrecursively set, this is a necessary parameter. There are other use cases as\nwell.</p>\n<p>Moving on, we need to check if the GameObject is null like so:</p>\n<pre><code class=\"language-csharp\">if (gameObject == null) return;\n</code></pre>\n<p>Returning from a void function in this way is called an <em>early out</em>. I love\nearly outs, and so should you. Using them whenever possible to exit a function\nkeeps your code readable and maintainable.</p>\n<p>Next, we get all the renderers recursively with this line:</p>\n<pre><code class=\"language-csharp\">var renderers = gameObject.GetComponentsInChildren&lt;Renderer&gt;(includeInactive);\n</code></pre>\n<p>The <code>var</code> keyword is a convenience of compile-time type inference. We know\n<code>renderers</code> is of the type <code>Renderer[]</code>, as in an array of renderers, because\nthat is what <code>GetComponentsInChildren</code> is guaranteed to return.</p>\n<p>You should know that the name <code>GetComponentsInChildren</code> may be a bit of a\nmisdirect, because it includes components in the parent(!) as well as immediate\nchildren, and their children(!), and so on.</p>\n<p>You may also be wondering why I chose to get components of type <code>Renderer</code>\ninstead of <code>MeshRenderer</code>. This way it works generically—in addition to\nGameObjects with the <code>MeshRenderer</code>, the method will apply for those with\n<code>LineRenderer</code>, and other inheritors of <code>Renderer</code>. (Feel free to modify the\nmethod to only affect only specific types.)</p>\n<p>Moving on, there is a null check for <code>renderers</code>:</p>\n<pre><code class=\"language-csharp\">if (renderers == null) return;\n</code></pre>\n<p>Null <code>renderers</code> is possible in an exceptional case. Again, an early out is an\nacceptable way to deal with this.</p>\n<p>Finally, we opt for a single-line <code>foreach</code> block to set each <code>Renderer</code> to the\nspecified <code>mode</code>:</p>\n<pre><code class=\"language-csharp\">foreach (var renderer in renderers) renderer.shadowCastingMode = mode;\n</code></pre>\n<p>Many people detest single-line expressions, but I find them terse and elegant.\nStill, change the function to match your sensibilities at your leisure.</p>\n<h3>Conclusion</h3>\n<p>Programmers new to C# may find extension methods and optional parameters jarring\nat first, as did I, but I find them to be fantastically useful language\nfeatures. Also, Unity's APIs and naming conventions can understandably throw one\nfor a loop (no pun intended). I hope the extension method and/or tutorial helped\nyou!</p>",
      "date_published": "2021-08-27T19:00:00-05:00",
      "date_modified": "2021-08-30T19:00:00-05:00",
      "language": "en",
      "tags": [
        "unity",
        "csharp"
      ]
    }
  ]
}